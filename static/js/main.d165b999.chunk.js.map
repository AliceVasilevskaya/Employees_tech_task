{"version":3,"sources":["components/EmployeesBirthday/EmployeesBirthday.module.css","components/Employees/Employees.module.css","components/EmployeesBirthday/EmployeeBirthdayItem/EmployeeBirthdayItem.tsx","utils/helpers.ts","api/api.ts","redux/employeesReducer.ts","HOCs/withSortingByKeys.tsx","components/EmployeesBirthday/EmployeesBirthday.tsx","redux/employeesSelectors.ts","components/Employees/Employee/EmployeeItem.tsx","components/Employees/AllEmployees.tsx","App.tsx","reportWebVitals.ts","redux/redux-store.ts","index.tsx"],"names":["module","exports","EmployeeBirthdayItem","employee","firstName","lastName","Date","dob","toLocaleString","month","day","year","getArrayFromMapKeys","key","array","mapKeys","arr","map","Map","birthdayMonth","length","includes","push","set","SetValuesByKeys","keys","i","get","SESSION_STORAGE_KEY","instance","axios","create","baseURL","employeesAPI","then","response","data","initialState","employees","activeEmployees","storageData","sessionStorage","getItem","JSON","parse","getActiveEmployeesFromSession","actions","type","toggleEmployee","employeeId","isActive","dispatch","getState","employeesPage","setItem","stringify","employeesReducer","state","action","withSortingByKeys","Component","props","sortBy","restProps","arrayEmployees","string","sort","a","b","nameA","nameB","sortArrayByName","className","styles","group","activeEmployeesHash","id","EmployeesBirthday","months","moment","concat","splice","EmployeesBirthdayItems","employeesBirthday","getActiveEmployees","getEmployees","EmployeeItem","onActiveChange","useCallback","e","target","value","employeeItem","selected","notSelected","name","defaultChecked","onChange","AllEmployees","EmployeeItems","employeesWrapper","App","useSelector","useDispatch","useMemo","filter","onToggleEmployee","useEffect","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleWare","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d165b999.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"employeesBirthday\":\"EmployeesBirthday_employeesBirthday__uMOKO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"employeesWrapper\":\"Employees_employeesWrapper__S4PXN\",\"employees\":\"Employees_employees__24Tp3\",\"selected\":\"Employees_selected__3Digl\",\"notSelected\":\"Employees_notSelected__2TjPB\",\"group\":\"Employees_group__2EExr\",\"employeeItem\":\"Employees_employeeItem__1d07x\"};","import React, { FC } from \"react\";\r\nimport { EmployeeType } from \"../../../common/global_prop_types\";\r\n\r\ntype PropsType = {\r\n  employee: EmployeeType;\r\n};\r\nexport const EmployeeBirthdayItem: FC<PropsType> = ({ employee }) => {\r\n  return (\r\n    <li>\r\n      {`${employee.firstName} ${employee.lastName} - \r\n        ${new Date(employee.dob).toLocaleString(\"en-GB\", {\r\n          month: \"long\",\r\n          day: \"2-digit\",\r\n          year: \"numeric\",\r\n        })} year`}\r\n    </li>\r\n  );\r\n};\r\n","import { ActiveEmployeesType, EmployeeType } from \"../common/global_prop_types\";\n\nexport const SetValuesByKeys = (key: string, arr: Array<EmployeeType>) => {\n  let map: Map<string, Array<EmployeeType>> = new Map();\n  let array: Array<EmployeeType> = [];\n\n  for (let employee of arr) {\n    let birthdayMonth = new Date(employee.dob).toLocaleString(\"en-GB\", {\n      month: \"long\",\n    });\n    if (key.length === 1 && key === employee.firstName[0]) {\n      !array.includes(employee) && array.push(employee);\n      map.set(key, array);\n    } else if (key.length > 1 && key === birthdayMonth) {\n      !array.includes(employee) && array.push(employee);\n      map.set(key, array);\n    }\n  }\n  return map;\n};\n\nexport const getArrayFromMapKeys = (\n  key: string,\n  array: Array<EmployeeType>\n) => {\n  let mapKeys = SetValuesByKeys(key, array);\n  for (let i of mapKeys.keys()) {\n    return mapKeys.get(i);\n  }\n};\n\nexport const sortArrayByName = (array: Array<any>, string: string) => {\n  array.sort(function (a, b) {\n    let nameA = a[string];\n    let nameB = b[string];\n    if (nameA < nameB) return -1;\n    if (nameA > nameB) return 1;\n    return 0;\n  });\n};\n\nconst SESSION_STORAGE_KEY = \"activeEmployees\";\n\nexport const getActiveEmployeesFromSession = (): ActiveEmployeesType => {\n  const storageData = sessionStorage.getItem(SESSION_STORAGE_KEY);\n  if (!storageData) {\n    return {};\n  }\n  return JSON.parse(storageData);\n};\n\nexport const setActiveEmployeesToSession = (\n  activeEmployees: ActiveEmployeesType\n) => {\n  sessionStorage.setItem(SESSION_STORAGE_KEY, JSON.stringify(activeEmployees));\n};\n","import axios from \"axios\";\r\nimport { EmployeeType } from \"../common/global_prop_types\";\r\n\r\nexport let instance = axios.create({\r\n  baseURL: `https://yalantis-react-school-api.yalantis.com/api/task0/`,\r\n});\r\nexport let employeesAPI = {\r\n  getEmployees() {\r\n    return instance\r\n      .get<Array<EmployeeType>>(`users`)\r\n      .then((response) => response.data);\r\n  },\r\n};\r\n\r\n","import { BaseThunkType, InferActionTypes, store } from \"./redux-store\";\r\nimport { employeesAPI } from \"../api/api\";\r\nimport { ActiveEmployeesType, EmployeeType } from \"../common/global_prop_types\";\r\nimport {\r\n  getActiveEmployeesFromSession,\r\n  setActiveEmployeesToSession,\r\n} from \"../utils/helpers\";\r\nimport { Dispatch } from \"react\";\r\n\r\nlet initialState = {\r\n  employees: [] as Array<EmployeeType>,\r\n  activeEmployees: getActiveEmployeesFromSession() as ActiveEmployeesType,\r\n};\r\n\r\ntype ActionTypes = InferActionTypes<typeof actions>;\r\ntype ThunkType = BaseThunkType<ActionTypes>;\r\nexport type InitialStateType = typeof initialState;\r\n\r\nconst employeesReducer = (\r\n  state = initialState,\r\n  action: ActionTypes\r\n): InitialStateType => {\r\n  switch (action.type) {\r\n    case \"employees/SET_EMPLOYEES_DATA\":\r\n      return { ...state, employees: action.employees };\r\n    case \"employees/SET_ACTIVE_EMPLOYEES\":\r\n      return {\r\n        ...state,\r\n        activeEmployees: {\r\n          ...state.activeEmployees,\r\n          ...action.activeEmployees,\r\n        },\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const actions = {\r\n  setEmployeesData: (employees: Array<EmployeeType>) =>\r\n    ({ type: \"employees/SET_EMPLOYEES_DATA\", employees } as const),\r\n  setActiveEmployees: (activeEmployees: ActiveEmployeesType) =>\r\n    ({ type: \"employees/SET_ACTIVE_EMPLOYEES\", activeEmployees } as const),\r\n};\r\n\r\nexport const requestEmployees = (): ThunkType => async (dispatch) => {\r\n  let data = await employeesAPI.getEmployees();\r\n  dispatch(actions.setEmployeesData(data));\r\n};\r\n\r\nexport const toggleEmployee =\r\n  (employeeId: EmployeeType[\"id\"], isActive: boolean) =>\r\n  (\r\n    dispatch: Dispatch<ActionTypes>,\r\n    getState: () => ReturnType<typeof store.getState>\r\n  ) => {\r\n    dispatch(actions.setActiveEmployees({ [employeeId]: isActive }));\r\n    setActiveEmployeesToSession(getState().employeesPage.activeEmployees);\r\n  };\r\n\r\n\r\nexport default employeesReducer;\r\n\r\n","import React, { ComponentType } from \"react\";\r\nimport {\r\n  ActiveEmployeesType,\r\n  EmployeeType,\r\n  toggleEmployeeType,\r\n} from \"../common/global_prop_types\";\r\nimport { getArrayFromMapKeys, sortArrayByName } from \"../utils/helpers\";\r\nimport styles from \"../components/Employees/Employees.module.css\";\r\nimport { toggleEmployee } from \"../redux/employeesReducer\";\r\n\r\ntype PropsType = {\r\n  keys: Array<string>;\r\n  array: Array<EmployeeType>;\r\n  sortBy: string;\r\n  activeEmployeesHash?: ActiveEmployeesType;\r\n  toggleEmployee?: toggleEmployeeType;\r\n};\r\n\r\nexport function withSortingByKeys<T>(Component: ComponentType<T>) {\r\n  let ComponentWrapper: React.FC<PropsType> = (props) => {\r\n    return (\r\n      <>\r\n        {props.keys.map((key: string) => {\r\n          let { keys, array, sortBy, ...restProps } = props;\r\n          let arrayEmployees: Array<EmployeeType> | undefined =\r\n            getArrayFromMapKeys(key, array);\r\n          arrayEmployees && sortArrayByName(arrayEmployees, sortBy);\r\n          return (\r\n            <div className={styles.group} key={key}>\r\n              <b>{key}</b>\r\n              {!arrayEmployees ? (\r\n                <span>: No Employees</span>\r\n              ) : (\r\n                arrayEmployees.map((employee: EmployeeType) => (\r\n                  <Component\r\n                    employee={employee}\r\n                    key={employee.id}\r\n                    isActive={props.activeEmployeesHash?.[employee.id]}\r\n                    toggleEmployee={toggleEmployee}\r\n                    {...(restProps as T)}\r\n                  />\r\n                ))\r\n              )}\r\n            </div>\r\n          );\r\n        })}\r\n      </>\r\n    );\r\n  };\r\n  return ComponentWrapper;\r\n}\r\n","import React, { FC } from \"react\";\r\nimport styles from \"./EmployeesBirthday.module.css\";\r\nimport { EmployeeBirthdayItem } from \"./EmployeeBirthdayItem/EmployeeBirthdayItem\";\r\nimport moment from \"moment\";\r\nimport { EmployeeType } from \"../../common/global_prop_types\";\r\nimport { withSortingByKeys } from \"../../HOCs/withSortingByKeys\";\r\n\r\ntype PropsType = {\r\n  activeEmployees: Array<EmployeeType>;\r\n};\r\n\r\nexport const EmployeesBirthday: FC<PropsType> = ({ activeEmployees }) => {\r\n  let months = moment.months();\r\n  months = months.concat(months.splice(0, months.length - 2));\r\n  let EmployeesBirthdayItems = withSortingByKeys(EmployeeBirthdayItem);\r\n\r\n  return (\r\n    <div className={styles.employeesBirthday}>\r\n      <h3>Employees Birthday</h3>\r\n      <hr />\r\n      {activeEmployees.length < 1 ? (\r\n        <div> Employees List is empty </div>\r\n      ) : (\r\n        <EmployeesBirthdayItems\r\n          keys={months}\r\n          array={activeEmployees}\r\n          sortBy={\"lastName\"}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","\r\nimport { AppStateType } from \"./redux-store\";\r\nexport const getActiveEmployees = (state: AppStateType) => {\r\n  return state.employeesPage.activeEmployees;\r\n};\r\nexport const getEmployees = (state: AppStateType) => {\r\n  return state.employeesPage.employees;\r\n};\r\n","import React, { ChangeEvent, FC, useCallback } from \"react\";\nimport styles from \"../Employees.module.css\";\nimport {\n  EmployeeType,\n  toggleEmployeeType,\n} from \"../../../common/global_prop_types\";\n\ntype PropsType = {\n  employee: EmployeeType;\n  isActive: boolean;\n  toggleEmployee: toggleEmployeeType;\n};\n\nconst EmployeeItem: FC<PropsType> = ({\n  employee,\n  isActive = false,\n  toggleEmployee,\n}) => {\n  const onActiveChange = useCallback(\n    (e: ChangeEvent<HTMLInputElement>) => {\n      toggleEmployee(employee.id, e.target.value === \"true\");\n    },\n    [employee, toggleEmployee]\n  );\n\n  return (\n    <div className={styles.employeeItem}>\n      <div className={isActive ? styles.selected : styles.notSelected}>\n        {`${employee.firstName}\n              ${employee.lastName}`}\n      </div>\n      <div>\n        <form>\n          <label>\n            <input\n              type=\"radio\"\n              name=\"isActive\"\n              value=\"true\"\n              defaultChecked={isActive}\n              onChange={onActiveChange}\n            />\n            active\n          </label>\n          <br />\n          <label>\n            <input\n              type=\"radio\"\n              name=\"isActive\"\n              onChange={onActiveChange}\n              value=\"false\"\n              defaultChecked={!isActive}\n            />\n            not active\n          </label>\n        </form>\n      </div>\n    </div>\n  );\n};\nexport default EmployeeItem;\n","import {\r\n  ActiveEmployeesType,\r\n  EmployeeType,\r\n  toggleEmployeeType,\r\n} from \"../../common/global_prop_types\";\r\nimport styles from \"./Employees.module.css\";\r\nimport { FC } from \"react\";\r\nimport { withSortingByKeys } from \"../../HOCs/withSortingByKeys\";\r\nimport EmployeeItem from \"./Employee/EmployeeItem\";\r\n\r\ntype PropsType = {\r\n  employees: Array<EmployeeType>;\r\n  activeEmployeesHash: ActiveEmployeesType;\r\n  toggleEmployee: toggleEmployeeType;\r\n};\r\n\r\nexport const AllEmployees: FC<PropsType> = ({\r\n  employees,\r\n  activeEmployeesHash,\r\n  toggleEmployee,\r\n}) => {\r\n  let alphabet = [\r\n    \"A\",\r\n    \"B\",\r\n    \"C\",\r\n    \"D\",\r\n    \"E\",\r\n    \"F\",\r\n    \"G\",\r\n    \"H\",\r\n    \"I\",\r\n    \"J\",\r\n    \"K\",\r\n    \"L\",\r\n    \"M\",\r\n    \"N\",\r\n    \"O\",\r\n    \"P\",\r\n    \"Q\",\r\n    \"R\",\r\n    \"S\",\r\n    \"T\",\r\n    \"U\",\r\n    \"V\",\r\n    \"W\",\r\n    \"X\",\r\n    \"Y\",\r\n    \"Z\",\r\n  ];\r\n  let EmployeeItems = withSortingByKeys(EmployeeItem);\r\n\r\n  return (\r\n    <div className={styles.employeesWrapper}>\r\n      <h3>Employees</h3>\r\n      <hr />\r\n      <div className={styles.employees}>\r\n        <EmployeeItems\r\n          keys={alphabet}\r\n          array={employees}\r\n          sortBy={\"firstName\"}\r\n          toggleEmployee={toggleEmployee}\r\n          activeEmployeesHash={activeEmployeesHash}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useCallback, useEffect, useMemo } from \"react\";\r\nimport \"./App.css\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { EmployeesBirthday } from \"./components/EmployeesBirthday/EmployeesBirthday\";\r\nimport { getActiveEmployees, getEmployees } from \"./redux/employeesSelectors\";\r\nimport { requestEmployees, toggleEmployee } from \"./redux/employeesReducer\";\r\nimport { AllEmployees } from \"./components/Employees/AllEmployees\";\r\nimport { EmployeeType } from \"./common/global_prop_types\";\r\n\r\nfunction App() {\r\n  const activeEmployeesHash = useSelector(getActiveEmployees);\r\n  const employees = useSelector(getEmployees);\r\n  const dispatch = useDispatch();\r\n\r\n  const activeEmployees = useMemo(() => {\r\n    return employees.filter((employee) => activeEmployeesHash[employee.id]);\r\n  }, [employees, activeEmployeesHash]);\r\n\r\n  const onToggleEmployee = useCallback(\r\n    (id: EmployeeType[\"id\"], value: boolean) => {\r\n      dispatch(toggleEmployee(id, value));\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  useEffect(() => {\r\n    dispatch(requestEmployees());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <AllEmployees\r\n        toggleEmployee={onToggleEmployee}\r\n        activeEmployeesHash={activeEmployeesHash}\r\n        employees={employees}\r\n      />\r\n      <EmployeesBirthday activeEmployees={activeEmployees} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {\r\n  Action,\r\n  applyMiddleware,\r\n  combineReducers,\r\n  compose,\r\n  createStore,\r\n} from \"redux\";\r\nimport employeesReducer from \"./employeesReducer\";\r\nimport thunkMiddleWare, { ThunkAction } from \"redux-thunk\";\r\n\r\nconst rootReducer = combineReducers({\r\n  employeesPage: employeesReducer,\r\n});\r\n\r\nexport type InferActionTypes<T> = T extends {\r\n  [keys: string]: (...args: any[]) => infer U;\r\n}\r\n  ? U\r\n  : never;\r\ntype RootReducerType = typeof rootReducer;\r\nexport type AppStateType = ReturnType<RootReducerType>;\r\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<\r\n  R,\r\n  AppStateType,\r\n  unknown,\r\n  A\r\n>;\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nexport const store = createStore(\r\n  rootReducer,\r\n  composeEnhancers(applyMiddleware(thunkMiddleWare))\r\n);\r\n\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./redux/redux-store\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}